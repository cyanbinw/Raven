package router

import (
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	_ "github.com/swirling-melodies/Raven/docs" // docs are generated by Swag CLI, you have to import it.
	"github.com/swirling-melodies/Raven/middlewares"
)

var v = NewReuter()

func InitRouter() {

	router := gin.Default()

	// 要在路由组之前全局使用「跨域中间件」, 否则OPTIONS会返回404
	router.Use(middlewares.CrossDomain())

	test := router.Group("test")
	testGroup(test)

	v1 := router.Group("v1")
	billGroupV1(v1)
	desireGroupV1(v1)
	investmentGroupV1(v1)
	targetGroupV1(v1)
	workGroupV1(v1)
	logGroupV1(v1)
	userGroupV1(v1)

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.Run()
}

func testGroup(c *gin.RouterGroup) {
	loadRouter(v.TestReuter.GetWork(), c)
}

func billGroupV1(c *gin.RouterGroup) {
	loadRouter(v.BillReuter.GetWork(), c)
}

func investmentGroupV1(c *gin.RouterGroup) {
	loadRouter(v.InvestmentReuter.GetWork(), c)
}

func desireGroupV1(c *gin.RouterGroup) {
	loadRouter(v.DesireReuter.GetWork(), c)
}

func targetGroupV1(c *gin.RouterGroup) {
	loadRouter(v.TargetReuter.GetWork(), c)
}

func workGroupV1(c *gin.RouterGroup) {
	loadRouter(v.WorkReuter.GetWork(), c)
}

func logGroupV1(c *gin.RouterGroup) {
	loadRouter(v.LogReuter.GetWork(), c)
}

func userGroupV1(c *gin.RouterGroup) {
	loadRouter(v.UserReuter.GetWork(), c)
}
